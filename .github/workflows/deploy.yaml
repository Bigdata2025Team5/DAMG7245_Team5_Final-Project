name: CI/CD - Test and Deploy

on:
  pull_request:
    branches: [main]

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  SERVICE_NAME: your-service-name
  REGION: us-central1

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        pip install -r requirements.txt
        pip install pytest python-dotenv

    - name: Inject mock environment variables
      run: |
        echo "OPENAI_API_KEY=test" >> $GITHUB_ENV
        echo "XAI_API_KEY=test" >> $GITHUB_ENV
        echo "AWS_ACCESS_KEY_ID=test" >> $GITHUB_ENV
        echo "AWS_SECRET_ACCESS_KEY=test" >> $GITHUB_ENV
        echo "AWS_S3_BUCKET=test-bucket" >> $GITHUB_ENV
        echo "GCP_PROJECT_ID=test" >> $GITHUB_ENV
        echo "PINECONE_API_KEY=test" >> $GITHUB_ENV
        echo "PINECONE_INDEX=test-index" >> $GITHUB_ENV
        echo "PINECONE_REGION=test-region" >> $GITHUB_ENV
        echo "SNOWFLAKE_USER=test" >> $GITHUB_ENV
        echo "SNOWFLAKE_PASSWORD=test" >> $GITHUB_ENV
        echo "SNOWFLAKE_ACCOUNT=test" >> $GITHUB_ENV
        echo "SNOWFLAKE_WAREHOUSE=test" >> $GITHUB_ENV
        echo "SNOWFLAKE_DATABASE=test_db" >> $GITHUB_ENV
        echo "SNOWFLAKE_SCHEMA=test_schema" >> $GITHUB_ENV
        echo "SNOWFLAKE_ROLE=test_role" >> $GITHUB_ENV

    - name: Run unit tests
      run: pytest backend/test/tests.py --maxfail=1 --disable-warnings -v

  deploy:
    needs: test
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v1
      with:
        credentials_json: ${{ secrets.GCP_CLOUD_RUN_KEY }}

    - name: Set up gcloud
      uses: google-github-actions/setup-gcloud@v1
      with:
        project_id: ${{ secrets.GCP_PROJECT_ID }}

    - name: Configure Docker
      run: gcloud auth configure-docker

    - name: Build and push Docker image
      run: |
        docker build -t gcr.io/$PROJECT_ID/$SERVICE_NAME:${{ github.sha }} .
        docker push gcr.io/$PROJECT_ID/$SERVICE_NAME:${{ github.sha }}

    - name: Deploy to Cloud Run
      run: |
        gcloud run deploy $SERVICE_NAME \
          --image gcr.io/$PROJECT_ID/$SERVICE_NAME:${{ github.sha }} \
          --platform managed \
          --region $REGION \
          --allow-unauthenticated \
          --port 8000 \
          --set-env-vars="OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }},
                          XAI_API_KEY=${{ secrets.XAI_API_KEY }},
                          SNOWFLAKE_USER=${{ secrets.SNOWFLAKE_USER }},
                          SNOWFLAKE_PASSWORD=${{ secrets.SNOWFLAKE_PASSWORD }},
                          SNOWFLAKE_ACCOUNT=${{ secrets.SNOWFLAKE_ACCOUNT }},
                          SNOWFLAKE_WAREHOUSE=${{ secrets.SNOWFLAKE_WAREHOUSE }},
                          SNOWFLAKE_DATABASE=${{ secrets.SNOWFLAKE_DATABASE }},
                          SNOWFLAKE_SCHEMA=${{ secrets.SNOWFLAKE_SCHEMA }},
                          SNOWFLAKE_ROLE=${{ secrets.SNOWFLAKE_ROLE }},
                          PINECONE_API_KEY=${{ secrets.PINECONE_API_KEY }},
                          PINECONE_INDEX=${{ secrets.PINECONE_INDEX }},
                          PINECONE_REGION=${{ secrets.PINECONE_REGION }},
                          AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }},
                          AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }},
                          AWS_S3_BUCKET=${{ secrets.AWS_S3_BUCKET }}"

    - name: Show Deployed URL
      run: echo "Deployed at $(gcloud run services describe $SERVICE_NAME --region $REGION --format='value(status.url)')"
